import numpy as np

def encrypt_image(pixel_data, key=50):
    # Encrypt by adding the key value to each "pixel"
    encrypted_data = (pixel_data + key).astype(np.uint8)  # Cast to uint8 to wrap around at 255
    return encrypted_data

def decrypt_image(encrypted_data, key=50):
    # Decrypt by subtracting the key value
    decrypted_data = (encrypted_data - key).astype(np.uint8)  # Cast to uint8 to wrap around at 0
    return decrypted_data

# Simulate a grayscale "image" as a 2D NumPy array
# Replace this with actual image data if running in a compatible environment
width, height = 5, 5  # Example dimensions
pixel_data = np.random.randint(0, 256, (height, width), dtype=np.uint8)

print("Original Pixel Data:")
print(pixel_data)

# Encrypt the "image"
encrypted_data = encrypt_image(pixel_data, key=50)
print("\nEncrypted Pixel Data:")
print(encrypted_data)

# Decrypt the "image"
decrypted_data = decrypt_image(encrypted_data, key=50)
print("\nDecrypted Pixel Data (should match original):")
print(decrypted_data)
